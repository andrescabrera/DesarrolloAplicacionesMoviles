
	// **.. No REST - Metodos para la vista jsp

	// Instancia y muestra el formulario
	@RequestMapping
	public String showForm(Model model) {
		UserForm userForm = new UserForm();
		model.addAttribute("userForm", userForm);
		return "/users/form";
	}

	// Recibe el formulario, crear un nuevo usuario o actualiza.
	@RequestMapping(method = RequestMethod.POST)
	public String createOrUpdate(
			@ModelAttribute("userForm") @Valid UserForm userForm,
			BindingResult result, Model model) {

		System.out.println(result.hasErrors());

		if (result.hasErrors()) {
			return "/users/form";
		}

		Long id = userForm.getId();
		User user = null;
		if (id != null) {
			user = interesesService.readUser(id);
			BeanUtils.copyProperties(userForm, user);
			interesesService.updateUser(user);
		} else {
			user = new User();
			BeanUtils.copyProperties(userForm, user);
			id = interesesService.createUser(user);
			System.out.println("El nuevo id es: " + id);
			model.addAttribute("user", user);
		}

		return "redirect:/users/view.html?id=" + id;
	}

	// Editar un usuario: Lo busca, instancia un formulario y lo setea y
	// devuelve a la vista
	@RequestMapping
	public String edit(@RequestParam("id") long id, Model model) {
		User user = interesesService.readUser(id);
		UserForm userForm = new UserForm();
		BeanUtils.copyProperties(user, userForm);
		model.addAttribute("userForm", userForm);
		return "/users/form";
	}

	// Lista los usuarios
	@RequestMapping(value = "/list.html")
	public String list(Model model) {
		List<User> users = interesesService.findUsers();
		model.addAttribute("users", users);
		return null;
	}

	// Se recibe un id de empleado y se lo borra
	@RequestMapping
	public String delete(@RequestParam("id") long id, Model model) {
		interesesService.deleteUser(interesesService.readUser(id));
		return "redirect:/users/list.html";
	}